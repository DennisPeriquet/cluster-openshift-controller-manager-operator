// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/cluster-openshift-controller-manager-operator/pkg/apis/openshiftcontrollermanager/v1"
	scheme "github.com/openshift/cluster-openshift-controller-manager-operator/pkg/generated/clientset/versioned/scheme"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// OpenShiftControllerManagerOperatorConfigsGetter has a method to return a OpenShiftControllerManagerOperatorConfigInterface.
// A group's client should implement this interface.
type OpenShiftControllerManagerOperatorConfigsGetter interface {
	OpenShiftControllerManagerOperatorConfigs() OpenShiftControllerManagerOperatorConfigInterface
}

// OpenShiftControllerManagerOperatorConfigInterface has methods to work with OpenShiftControllerManagerOperatorConfig resources.
type OpenShiftControllerManagerOperatorConfigInterface interface {
	Create(*v1.OpenShiftControllerManagerOperatorConfig) (*v1.OpenShiftControllerManagerOperatorConfig, error)
	Update(*v1.OpenShiftControllerManagerOperatorConfig) (*v1.OpenShiftControllerManagerOperatorConfig, error)
	UpdateStatus(*v1.OpenShiftControllerManagerOperatorConfig) (*v1.OpenShiftControllerManagerOperatorConfig, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.OpenShiftControllerManagerOperatorConfig, error)
	List(opts meta_v1.ListOptions) (*v1.OpenShiftControllerManagerOperatorConfigList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.OpenShiftControllerManagerOperatorConfig, err error)
	OpenShiftControllerManagerOperatorConfigExpansion
}

// openShiftControllerManagerOperatorConfigs implements OpenShiftControllerManagerOperatorConfigInterface
type openShiftControllerManagerOperatorConfigs struct {
	client rest.Interface
}

// newOpenShiftControllerManagerOperatorConfigs returns a OpenShiftControllerManagerOperatorConfigs
func newOpenShiftControllerManagerOperatorConfigs(c *OpenshiftcontrollermanagerV1Client) *openShiftControllerManagerOperatorConfigs {
	return &openShiftControllerManagerOperatorConfigs{
		client: c.RESTClient(),
	}
}

// Get takes name of the openShiftControllerManagerOperatorConfig, and returns the corresponding openShiftControllerManagerOperatorConfig object, and an error if there is any.
func (c *openShiftControllerManagerOperatorConfigs) Get(name string, options meta_v1.GetOptions) (result *v1.OpenShiftControllerManagerOperatorConfig, err error) {
	result = &v1.OpenShiftControllerManagerOperatorConfig{}
	err = c.client.Get().
		Resource("openshiftcontrollermanageroperatorconfigs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of OpenShiftControllerManagerOperatorConfigs that match those selectors.
func (c *openShiftControllerManagerOperatorConfigs) List(opts meta_v1.ListOptions) (result *v1.OpenShiftControllerManagerOperatorConfigList, err error) {
	result = &v1.OpenShiftControllerManagerOperatorConfigList{}
	err = c.client.Get().
		Resource("openshiftcontrollermanageroperatorconfigs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested openShiftControllerManagerOperatorConfigs.
func (c *openShiftControllerManagerOperatorConfigs) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("openshiftcontrollermanageroperatorconfigs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a openShiftControllerManagerOperatorConfig and creates it.  Returns the server's representation of the openShiftControllerManagerOperatorConfig, and an error, if there is any.
func (c *openShiftControllerManagerOperatorConfigs) Create(openShiftControllerManagerOperatorConfig *v1.OpenShiftControllerManagerOperatorConfig) (result *v1.OpenShiftControllerManagerOperatorConfig, err error) {
	result = &v1.OpenShiftControllerManagerOperatorConfig{}
	err = c.client.Post().
		Resource("openshiftcontrollermanageroperatorconfigs").
		Body(openShiftControllerManagerOperatorConfig).
		Do().
		Into(result)
	return
}

// Update takes the representation of a openShiftControllerManagerOperatorConfig and updates it. Returns the server's representation of the openShiftControllerManagerOperatorConfig, and an error, if there is any.
func (c *openShiftControllerManagerOperatorConfigs) Update(openShiftControllerManagerOperatorConfig *v1.OpenShiftControllerManagerOperatorConfig) (result *v1.OpenShiftControllerManagerOperatorConfig, err error) {
	result = &v1.OpenShiftControllerManagerOperatorConfig{}
	err = c.client.Put().
		Resource("openshiftcontrollermanageroperatorconfigs").
		Name(openShiftControllerManagerOperatorConfig.Name).
		Body(openShiftControllerManagerOperatorConfig).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *openShiftControllerManagerOperatorConfigs) UpdateStatus(openShiftControllerManagerOperatorConfig *v1.OpenShiftControllerManagerOperatorConfig) (result *v1.OpenShiftControllerManagerOperatorConfig, err error) {
	result = &v1.OpenShiftControllerManagerOperatorConfig{}
	err = c.client.Put().
		Resource("openshiftcontrollermanageroperatorconfigs").
		Name(openShiftControllerManagerOperatorConfig.Name).
		SubResource("status").
		Body(openShiftControllerManagerOperatorConfig).
		Do().
		Into(result)
	return
}

// Delete takes name of the openShiftControllerManagerOperatorConfig and deletes it. Returns an error if one occurs.
func (c *openShiftControllerManagerOperatorConfigs) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("openshiftcontrollermanageroperatorconfigs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *openShiftControllerManagerOperatorConfigs) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Resource("openshiftcontrollermanageroperatorconfigs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched openShiftControllerManagerOperatorConfig.
func (c *openShiftControllerManagerOperatorConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.OpenShiftControllerManagerOperatorConfig, err error) {
	result = &v1.OpenShiftControllerManagerOperatorConfig{}
	err = c.client.Patch(pt).
		Resource("openshiftcontrollermanageroperatorconfigs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
