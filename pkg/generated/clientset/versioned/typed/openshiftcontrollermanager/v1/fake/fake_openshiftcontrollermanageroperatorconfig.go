// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	openshiftcontrollermanager_v1 "github.com/openshift/cluster-openshift-controller-manager-operator/pkg/apis/openshiftcontrollermanager/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeOpenShiftControllerManagerOperatorConfigs implements OpenShiftControllerManagerOperatorConfigInterface
type FakeOpenShiftControllerManagerOperatorConfigs struct {
	Fake *FakeOpenshiftcontrollermanagerV1
}

var openshiftcontrollermanageroperatorconfigsResource = schema.GroupVersionResource{Group: "openshiftcontrollermanager.operator.openshift.io", Version: "v1", Resource: "openshiftcontrollermanageroperatorconfigs"}

var openshiftcontrollermanageroperatorconfigsKind = schema.GroupVersionKind{Group: "openshiftcontrollermanager.operator.openshift.io", Version: "v1", Kind: "OpenShiftControllerManagerOperatorConfig"}

// Get takes name of the openShiftControllerManagerOperatorConfig, and returns the corresponding openShiftControllerManagerOperatorConfig object, and an error if there is any.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) Get(name string, options v1.GetOptions) (result *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(openshiftcontrollermanageroperatorconfigsResource, name), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig), err
}

// List takes label and field selectors, and returns the list of OpenShiftControllerManagerOperatorConfigs that match those selectors.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) List(opts v1.ListOptions) (result *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(openshiftcontrollermanageroperatorconfigsResource, openshiftcontrollermanageroperatorconfigsKind, opts), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfigList{ListMeta: obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfigList).ListMeta}
	for _, item := range obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested openShiftControllerManagerOperatorConfigs.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(openshiftcontrollermanageroperatorconfigsResource, opts))
}

// Create takes the representation of a openShiftControllerManagerOperatorConfig and creates it.  Returns the server's representation of the openShiftControllerManagerOperatorConfig, and an error, if there is any.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) Create(openShiftControllerManagerOperatorConfig *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig) (result *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(openshiftcontrollermanageroperatorconfigsResource, openShiftControllerManagerOperatorConfig), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig), err
}

// Update takes the representation of a openShiftControllerManagerOperatorConfig and updates it. Returns the server's representation of the openShiftControllerManagerOperatorConfig, and an error, if there is any.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) Update(openShiftControllerManagerOperatorConfig *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig) (result *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(openshiftcontrollermanageroperatorconfigsResource, openShiftControllerManagerOperatorConfig), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeOpenShiftControllerManagerOperatorConfigs) UpdateStatus(openShiftControllerManagerOperatorConfig *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig) (*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(openshiftcontrollermanageroperatorconfigsResource, "status", openShiftControllerManagerOperatorConfig), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig), err
}

// Delete takes name of the openShiftControllerManagerOperatorConfig and deletes it. Returns an error if one occurs.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(openshiftcontrollermanageroperatorconfigsResource, name), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(openshiftcontrollermanageroperatorconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfigList{})
	return err
}

// Patch applies the patch and returns the patched openShiftControllerManagerOperatorConfig.
func (c *FakeOpenShiftControllerManagerOperatorConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(openshiftcontrollermanageroperatorconfigsResource, name, data, subresources...), &openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*openshiftcontrollermanager_v1.OpenShiftControllerManagerOperatorConfig), err
}
